jquery其实就是一堆js函数(js库)

jQuery面向用户良好的设计使得在使用过程中彻底解放了你记忆原生操作DOM的接口

jQuery中包含多个可重用的函数，用来辅助我们简化javascript开发

jQuery在半数以上并没有复杂交互的网站中得以大面积使用，因为它们需要的仅仅是一些
兼容低级浏览器而又呈现酷炫效果动画的页面。（jQuery出到3，但大公司pc端依然用1.x版本、移动端2.x版本）

jQuery改变了数百万人编写JavaScript的方式，当然部分人已经觉得时过境迁，组件化，工程化，大行其道，
但请不要忘记他对前端开发者的启蒙意义！且很多公司很多项目依然需要他!

核心全局函数：$(jQuery)
$()相当于一个函数，在函数中传入参数(参数是符合css选择器规则的字符串)，可以获取页面中任何一个标签

jQuery选择器选择上来的是一个类数组(数组形式，但是也拥有对象的方法)
$('div').css()  标签选择器 
实例方法：最后都作用于选择出来的标签上

jquery与原生使用区别：
jquery选择器选出来的一个组，通过jquery的方法可以对这个组集中操作，这是因为jquery内部写了很多的循环，将用户外部的省略
原生选出来的组，需要将这个组中的每一个单独操作，

$()中参数规则：
        css selector
            $('div ul li')

        jquery unique selector jquery特有规则选择器
        参考网站：http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp
        $(".wrapper ul li:first")选择第一个li
        $(".wrapper ul li:odd")奇数选择器 even偶数
        $(".wrapper ul li:eq(x)")选择第x个 当x为负值的时候，从后面向前数
        $("li[data = 'zhangfan']") 选择li下面data = "zhangfan"的这个标签元素 选择私有属性
        $("li[data$= 'zhangfan']") 选择li下面必须具备data属性的，而且必须以zhangfan结尾的标签元素 同样还可以使用 ^ !

		null、undefined、
        容错机制(当你在选择器中的参数传null，undefined 都不会报出错,即使选择了之后，没有这个东西也不会报错)
        如果没有容错机制，因为js是单线程的，这样整个程序就停了
        容错机制很好的避免了这些错误的发生

        dom对象
        参数传递原生dom对象，当你将一个获取到的原生传入$()中后，jQuery会将这个原生的dom对象包装成jQuery对象，
        通过这样包装之后就可以直接使用jquery中的方法
        var oDiv= document.getElementById('demo')
        $(oDiv).css() 同样也是包裹

        补充：$("div ul li ").each(function(index，ele){  可以遍历ul下的li
            $(ele).find('span').css({color:colorArr[index]})  
            find方法  可以找ele代表的标签下的span标签
            jquery也可以实现链式调用，因为每次调用方法之后返回的都是一个jquery对象！
        }) 
        
		传递$(function(){}) 
        原生中的时间线的问题：
        DOMContentLoaded 在window.onload之前触发的事件  标志着dom加载完成
        window.onload = function(){}当所有的css html都加载完成之后，最后调用window.onload

        下面的这个，当dom加载完成之后(DOMContentLoaded),当触发DOMContentLoaded之后下面的这个就会执行
        $(function(){})
        在$()括号中放置一个函数，就是相当于绑定一个事件，事件类型就是DOMContentLoaded
        下面是上面的简写
        $(document).ready()   
        
        两个参数
        $('ul','.wrapper')  wrapper在这里充当上下文。这个选择器的意思是，在wrapper标签下选择ul标签

    补充：$() 执行之后返回一个对象？
        jquery库在写的时候，是以一个闭包的形式(立即执行函数)来写的，也就是封闭作用域，防止影响外部变量
        (function(){
          jQuery = function(selector){
              //当我们在外部执行$('.demo')的时候，这里将demo传给selector 然后通过调用这个函数返回下面的对象
              return new jQuery.prototype.init(selector)
          }
          jQuery.prototype.init = function(selector){
              //this = {}
              利用原型上的init函数  选出dom  并且包装成jQuery对象，返回
            if(selector.indexOf('.')! = -1){
                var dom = document.getRlementsByClassName(selector.slice(1))
            }else if(selector.indexOf('#')! = -1){
                var dom = document.getElementById(selector.slice(1))
            }
            if(dom.length == undefined){
                this[0] = dom;
                this.length++;
            }else{
                // 基础铺垫
                for(var i = o;i<dom.length;i++){
                    this[i] = dom[i];
                    this.length++;
                }
            }
            return this;
          }
          
          //css
          jQuery.prototype.css = function (config) {
                // 对象解析
                // 循环操作每一个dom
                // 循环操作
                for (var i = 0; i < this.length; i++) {
                    for (var attr in config) {
                        this[i].style[attr] = config[attr];
                    }
                }
                // 链式操作重点
                return this;
                // 这里是拿到谁操作完成之后，又将其返回出去(这里返回的还是jQuery对象)，方便下一次操作
            }
            // 让jQuery.prototype.init原型 执行jQuery原型
            jQuery.prototype.init.prototype = jQuery.prototype;

            window.$ = window.jQuery = jQuery
            上面这行代码的作用是，保证当代码执行完成之后jQuery这个函数不会消失，因为将jQuery挂载到全局变量下
            相当于将jQuery这个函数返回到了外部，形成了闭包，这样jQuery就不会没了
        })()


jQuery实例方法
    1:$('.demo').get() :get获得原生的dom元素
    2:$('.demo').eq(x) :选中demo中的第X个元素
    3:$('.demo').find(x) :搜索后代中的x元素
    4:$('.demo').filter()：过滤作用  找到符合条件的  条件以参数的形式传入
    5:$('.demo').not(): 与filter用法相同作用相反，找到不符合条件的 条件以参数的形式传入
    6:$('.demo').is('li'): 判断选中的是不是li，返回Boolean值
    7:$('.demo').has('li'):选择demo中有li的元素


dom操作 取赋值相关的方法
    .html():等同于innerHTML方法，设置或返回表格行的开始和结束标签之间的 HTML。
    .text():等同于innerTEXT方法，取出从起始位置到终止位置的内容,但它去除Html标签
    .size():等同于原生中的length 求长度
    .addClass():增加类名
    .removeClass():删除类名
    .hasClass():判断有没有这个类名

补充小知识：并列选择器：两个选择器固定一个元素

    css() 方法设置或返回被选元素的一个或多个样式属性。

    attr()  设置或者获取指定的属性值  一个参数获取，两个参数设置
    attr是基于：setAttribute(方法添加指定的属性，并为其赋指定的值。如果这个指定的属性已存在，则仅设置/更改值。)
               getAtteribute(方法返回指定属性名的属性值。)
    是上面两个的结合体

    prop() 针对js原生对象的操作(特性才能映射,非特性(自定义的属性)不能映射) 方法设置或返回被选元素的属性和值。
    如需移除属性，请使用 removeProp() 方法。

    prop() 操作js dom{} 赋值赋的不是特性的时候  是显示不到dom标签上的 但是通过prop还是能获取到这个属性的、
    这就没有映射关系，非特性属性不能映射造成的。

    使用：给标签设置自定义属性的时候使用attr(),想获取特性的时候就使用prop()

    注意:尽量避免直接使用行间样式。因为行间样式的权重过高，不利于响应式设计，破坏了c3和h5的方案
    prop和attr的区别:jquery认为attribute的checked selected disabled就是表示该属性初始状态的值
                    property的checked selected disabled表示该属性实时状态的值
    prop修改的时候改的是boolean值，但是attr修改的就是实际的值


    val()方法:获取表单相关元素的value值

基于jQuery对象的增删改查相关方法
    .next() 获取选中元素的下一个兄弟元素
    .prev() 获取当前选中元素的上一个兄弟节点
     
    .nextAll() 获取当前选中元素所有的下面兄弟节点
    .prevAll() 获取当前选中元素所有的上面兄弟节点
    
    .nextUntil() 向后到...为止
    .prevUntil() 向前到...为止
    上面这两个括号中可以有两个限制条件

    siblings() 获取兄弟节点

    parent() 获取父级 返回的是直接父级(上一级) 
    parents() 获取父级 返回的是所有父级 
    parents只会从自己的上一级开始看，

    closest() 获取离你最近的满足条件的父级 从他自己开始找，如果自己满足条件，那就选中自己

    offsetParent() 选择离他最近的有定位的父级

    slice() 截取某几个dom元素  传递两个参数，开始点，结束点

    A.insertBefore(B) 插入B在A的前面 这里传参传的是字符串--css选择器格式
    A.Before(B) 插入A在B的前面  这里传参传的是jQuery对象($())  如果只写字符串，直接将这个字符串文本放到前面
    总结:这里对上面两种方法选择的时候--当操作完成之后,后续还要继续操作,就选择谁  就将谁放在前面

    A.appendTo(B) 将A添加到B中去 相当于原生js中appendchild
    A.append(B) 将B添加到A中去 这里添加的参数也是$()(jquery对象)

    A.prependTo(B) 将A添加到B的第一个位置
    A.prepend(B) 将B添加到A的第一个位置 参数是$()

    A.remove() 删除选中的dom元素A 删除之后把dom上的事件也删除掉了 当再append这个dom的时候  以前的事件没有了
    A.detach() 删除选中dom元素A 删除之后保留dom上的事件

    $(A).append(B)增加A中的东西到B之中 这里A包括标签等等一系列的东西，多复杂都可以 通过这种方式可以凭空创建一个东西

    .wrap() 给标签添加父级  传递的参数可以是字符串原生dom也可以是jQuery对象
    当传递的参数是已有的标签元素的时候，会直接将元素赋值过去而不是剪切
    同样这里要注意的是,当你选中好几个dom的时候，给他设置父级，会给所有的选中dom都设置上父级。这个是jquery的源码循环特点

    wrapInner() 给选中元素内部标签设置父级

    wrapAll() 给选中的元素增加一个统一的父级

    unwrap 解绑(取消)直接父级  当删除到直接父级是body的时候就删除不了了

    clone() 克隆dom元素 同时可以将标签上的天生属性和自定义属性都能克隆过来,但是事件不能被克隆
    注意：当在clone()括号中传递参数true的时候，就能克隆事件了，但是不是所有的都能被克隆

    data() 方法向被选元素附加数据，或者从被选元素获取数据。存储的数据是什么类型，取出来的数据就是什么类型(详细信息查阅3-index.html)
    data传递参数可选，传递参数取回设置参数的值，如果没有设置值，data方法将以对象的形式将所有存储的数据取回
    